name: Test, build and push artifacts

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "docs/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**.md"

env:
  # TODO(@okdas): reuse versions from here in Dockerfiles
  GOLANG_PROTOBUF_VERSION: "1.28"
  MOCKGEN_VERSION: "1.6.0"
  PROTOC_VERSION: "3.19.4"

jobs:
  # setup-prerequisites:
  #   runs-on: ubuntu-latest

  test-multiple-go-versions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ["1.17", "1.18"]
    name: Go ${{ matrix.go }} test
    steps:
      - uses: actions/checkout@v3
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-${{ matrix.go }}-
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: ${{ env.PROTOC_VERSION }}
      - name: install protoc-gen-go
        run: go install "google.golang.org/protobuf/cmd/protoc-gen-go@v${GOLANG_PROTOBUF_VERSION}" && protoc-gen-go --version
      - name: install mockgen
        run: go install github.com/golang/mock/mockgen@v${MOCKGEN_VERSION} && mockgen --version
      - name: generate protobufs and mocks
        run: make protogen_local && make mockgen
      - name: run all tests
        run: make test_all_with_annotations
      - name: Annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.5.1
        with:
          test-results: test_results.json
      - name: Go Coverage Badge # Pass the `coverage.out` output to this action
        if: always()
        uses: tj-actions/coverage-badge-go@v1.2
        with:
          filename: coverage.out

  # TODO(@okdas): reuse artifacts built by the previous job instead
  # of going through the build process in container build job again
  build-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Build dev & prod images
        imageType: [dev, prod]
    steps:
      - uses: actions/checkout@v3
      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v2
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Metadata action
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            okdas/pocket-v1
            ghcr.io/okdas/pocket-v1
          tags: |
            type=schedule${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=semver,pattern={{version}}${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=semver,pattern={{major}}.{{minor}}${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=semver,pattern={{major}}${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=ref,event=branch${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=ref,event=pr${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=sha${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
            type=raw,value=latest,enable={{is_default_branch}}${{ matrix.imageType == 'dev' && ',suffix=-dev' || '' }}
      - name: Login to  DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          file: build/Dockerfile.prod
